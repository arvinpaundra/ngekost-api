// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/arvinpaundra/ngekost-api/internal/entity"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	request "github.com/arvinpaundra/ngekost-api/internal/adapter/request"
)

// RoomRepository is an autogenerated mock type for the RoomRepository type
type RoomRepository struct {
	mock.Mock
}

// CountByKostId provides a mock function with given fields: ctx, kostId, query
func (_m *RoomRepository) CountByKostId(ctx context.Context, kostId string, query *request.Common) (int, error) {
	ret := _m.Called(ctx, kostId, query)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *request.Common) (int, error)); ok {
		return rf(ctx, kostId, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *request.Common) int); ok {
		r0 = rf(ctx, kostId, query)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *request.Common) error); ok {
		r1 = rf(ctx, kostId, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, roomId
func (_m *RoomRepository) Delete(ctx context.Context, roomId string) error {
	ret := _m.Called(ctx, roomId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, roomId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteWithTx provides a mock function with given fields: ctx, tx, roomId
func (_m *RoomRepository) DeleteWithTx(ctx context.Context, tx *gorm.DB, roomId string) error {
	ret := _m.Called(ctx, tx, roomId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string) error); ok {
		r0 = rf(ctx, tx, roomId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: ctx, roomId
func (_m *RoomRepository) FindById(ctx context.Context, roomId string) (*entity.Room, error) {
	ret := _m.Called(ctx, roomId)

	var r0 *entity.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Room, error)); ok {
		return rf(ctx, roomId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Room); ok {
		r0 = rf(ctx, roomId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Room)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, roomId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByKostId provides a mock function with given fields: ctx, kostId, query
func (_m *RoomRepository) FindByKostId(ctx context.Context, kostId string, query *request.Common) ([]*entity.Room, error) {
	ret := _m.Called(ctx, kostId, query)

	var r0 []*entity.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *request.Common) ([]*entity.Room, error)); ok {
		return rf(ctx, kostId, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *request.Common) []*entity.Room); ok {
		r0 = rf(ctx, kostId, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Room)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *request.Common) error); ok {
		r1 = rf(ctx, kostId, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, room
func (_m *RoomRepository) Save(ctx context.Context, room *entity.Room) error {
	ret := _m.Called(ctx, room)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Room) error); ok {
		r0 = rf(ctx, room)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveWithTx provides a mock function with given fields: ctx, tx, room
func (_m *RoomRepository) SaveWithTx(ctx context.Context, tx *gorm.DB, room *entity.Room) error {
	ret := _m.Called(ctx, tx, room)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Room) error); ok {
		r0 = rf(ctx, tx, room)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, room, roomId
func (_m *RoomRepository) Update(ctx context.Context, room *entity.Room, roomId string) error {
	ret := _m.Called(ctx, room, roomId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Room, string) error); ok {
		r0 = rf(ctx, room, roomId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWithTx provides a mock function with given fields: ctx, tx, room, roomId
func (_m *RoomRepository) UpdateWithTx(ctx context.Context, tx *gorm.DB, room *entity.Room, roomId string) error {
	ret := _m.Called(ctx, tx, room, roomId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Room, string) error); ok {
		r0 = rf(ctx, tx, room, roomId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRoomRepository creates a new instance of RoomRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoomRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoomRepository {
	mock := &RoomRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
