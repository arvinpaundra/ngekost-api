// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	contract "github.com/arvinpaundra/ngekost-api/internal/driver/contract"
	mock "github.com/stretchr/testify/mock"
)

// Transaction is an autogenerated mock type for the Transaction type
type Transaction struct {
	mock.Mock
}

// BillRepository provides a mock function with given fields:
func (_m *Transaction) BillRepository() contract.BillRepository {
	ret := _m.Called()

	var r0 contract.BillRepository
	if rf, ok := ret.Get(0).(func() contract.BillRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contract.BillRepository)
		}
	}

	return r0
}

// Commit provides a mock function with given fields:
func (_m *Transaction) Commit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KostRepository provides a mock function with given fields:
func (_m *Transaction) KostRepository() contract.KostRepository {
	ret := _m.Called()

	var r0 contract.KostRepository
	if rf, ok := ret.Get(0).(func() contract.KostRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contract.KostRepository)
		}
	}

	return r0
}

// KostRuleRepository provides a mock function with given fields:
func (_m *Transaction) KostRuleRepository() contract.KostRuleRepository {
	ret := _m.Called()

	var r0 contract.KostRuleRepository
	if rf, ok := ret.Get(0).(func() contract.KostRuleRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contract.KostRuleRepository)
		}
	}

	return r0
}

// LesseeRepository provides a mock function with given fields:
func (_m *Transaction) LesseeRepository() contract.LesseeRepository {
	ret := _m.Called()

	var r0 contract.LesseeRepository
	if rf, ok := ret.Get(0).(func() contract.LesseeRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contract.LesseeRepository)
		}
	}

	return r0
}

// OwnerRepository provides a mock function with given fields:
func (_m *Transaction) OwnerRepository() contract.OwnerRepository {
	ret := _m.Called()

	var r0 contract.OwnerRepository
	if rf, ok := ret.Get(0).(func() contract.OwnerRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contract.OwnerRepository)
		}
	}

	return r0
}

// PaymentRepository provides a mock function with given fields:
func (_m *Transaction) PaymentRepository() contract.PaymentRepository {
	ret := _m.Called()

	var r0 contract.PaymentRepository
	if rf, ok := ret.Get(0).(func() contract.PaymentRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contract.PaymentRepository)
		}
	}

	return r0
}

// Rollback provides a mock function with given fields:
func (_m *Transaction) Rollback() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoomAssetRepository provides a mock function with given fields:
func (_m *Transaction) RoomAssetRepository() contract.RoomAssetRepository {
	ret := _m.Called()

	var r0 contract.RoomAssetRepository
	if rf, ok := ret.Get(0).(func() contract.RoomAssetRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contract.RoomAssetRepository)
		}
	}

	return r0
}

// RoomRepository provides a mock function with given fields:
func (_m *Transaction) RoomRepository() contract.RoomRepository {
	ret := _m.Called()

	var r0 contract.RoomRepository
	if rf, ok := ret.Get(0).(func() contract.RoomRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contract.RoomRepository)
		}
	}

	return r0
}

// SessionRepository provides a mock function with given fields:
func (_m *Transaction) SessionRepository() contract.SessionRepository {
	ret := _m.Called()

	var r0 contract.SessionRepository
	if rf, ok := ret.Get(0).(func() contract.SessionRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contract.SessionRepository)
		}
	}

	return r0
}

// UserRepository provides a mock function with given fields:
func (_m *Transaction) UserRepository() contract.UserRepository {
	ret := _m.Called()

	var r0 contract.UserRepository
	if rf, ok := ret.Get(0).(func() contract.UserRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contract.UserRepository)
		}
	}

	return r0
}

// NewTransaction creates a new instance of Transaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransaction(t interface {
	mock.TestingT
	Cleanup(func())
}) *Transaction {
	mock := &Transaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
