// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/arvinpaundra/ngekost-api/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// OwnerRepository is an autogenerated mock type for the OwnerRepository type
type OwnerRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, keyword
func (_m *OwnerRepository) Count(ctx context.Context, keyword string) (int, error) {
	ret := _m.Called(ctx, keyword)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, keyword)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, keyword)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, keyword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, keyword
func (_m *OwnerRepository) Find(ctx context.Context, keyword string) ([]*entity.Owner, error) {
	ret := _m.Called(ctx, keyword)

	var r0 []*entity.Owner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*entity.Owner, error)); ok {
		return rf(ctx, keyword)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*entity.Owner); ok {
		r0 = rf(ctx, keyword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Owner)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, keyword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, ownerId
func (_m *OwnerRepository) FindById(ctx context.Context, ownerId string) (*entity.Owner, error) {
	ret := _m.Called(ctx, ownerId)

	var r0 *entity.Owner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Owner, error)); ok {
		return rf(ctx, ownerId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Owner); ok {
		r0 = rf(ctx, ownerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Owner)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ownerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, owner
func (_m *OwnerRepository) Save(ctx context.Context, owner *entity.Owner) error {
	ret := _m.Called(ctx, owner)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Owner) error); ok {
		r0 = rf(ctx, owner)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, owner, ownerId
func (_m *OwnerRepository) Update(ctx context.Context, owner *entity.Owner, ownerId string) error {
	ret := _m.Called(ctx, owner, ownerId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Owner, string) error); ok {
		r0 = rf(ctx, owner, ownerId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOwnerRepository creates a new instance of OwnerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOwnerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OwnerRepository {
	mock := &OwnerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
