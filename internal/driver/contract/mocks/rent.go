// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/arvinpaundra/ngekost-api/internal/entity"

	mock "github.com/stretchr/testify/mock"

	request "github.com/arvinpaundra/ngekost-api/internal/adapter/request"
)

// RentRepository is an autogenerated mock type for the RentRepository type
type RentRepository struct {
	mock.Mock
}

// CheckExistRent provides a mock function with given fields: ctx, lesseeId
func (_m *RentRepository) CheckExistRent(ctx context.Context, lesseeId string) (bool, error) {
	ret := _m.Called(ctx, lesseeId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, lesseeId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, lesseeId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, lesseeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountByKostId provides a mock function with given fields: ctx, kostId, query
func (_m *RentRepository) CountByKostId(ctx context.Context, kostId string, query *request.Common) (int, error) {
	ret := _m.Called(ctx, kostId, query)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *request.Common) (int, error)); ok {
		return rf(ctx, kostId, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *request.Common) int); ok {
		r0 = rf(ctx, kostId, query)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *request.Common) error); ok {
		r1 = rf(ctx, kostId, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountByLesseeId provides a mock function with given fields: ctx, lesseeId, query
func (_m *RentRepository) CountByLesseeId(ctx context.Context, lesseeId string, query *request.Common) (int, error) {
	ret := _m.Called(ctx, lesseeId, query)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *request.Common) (int, error)); ok {
		return rf(ctx, lesseeId, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *request.Common) int); ok {
		r0 = rf(ctx, lesseeId, query)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *request.Common) error); ok {
		r1 = rf(ctx, lesseeId, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, rentId
func (_m *RentRepository) Delete(ctx context.Context, rentId string) error {
	ret := _m.Called(ctx, rentId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, rentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: ctx, rentId
func (_m *RentRepository) FindById(ctx context.Context, rentId string) (*entity.Rent, error) {
	ret := _m.Called(ctx, rentId)

	var r0 *entity.Rent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Rent, error)); ok {
		return rf(ctx, rentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Rent); ok {
		r0 = rf(ctx, rentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Rent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, rentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByKostId provides a mock function with given fields: ctx, kostId, query
func (_m *RentRepository) FindByKostId(ctx context.Context, kostId string, query *request.Common) ([]*entity.Rent, error) {
	ret := _m.Called(ctx, kostId, query)

	var r0 []*entity.Rent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *request.Common) ([]*entity.Rent, error)); ok {
		return rf(ctx, kostId, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *request.Common) []*entity.Rent); ok {
		r0 = rf(ctx, kostId, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Rent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *request.Common) error); ok {
		r1 = rf(ctx, kostId, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByLesseeId provides a mock function with given fields: ctx, lesseId, query
func (_m *RentRepository) FindByLesseeId(ctx context.Context, lesseId string, query *request.Common) ([]*entity.Rent, error) {
	ret := _m.Called(ctx, lesseId, query)

	var r0 []*entity.Rent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *request.Common) ([]*entity.Rent, error)); ok {
		return rf(ctx, lesseId, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *request.Common) []*entity.Rent); ok {
		r0 = rf(ctx, lesseId, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Rent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *request.Common) error); ok {
		r1 = rf(ctx, lesseId, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, rent
func (_m *RentRepository) Save(ctx context.Context, rent *entity.Rent) error {
	ret := _m.Called(ctx, rent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Rent) error); ok {
		r0 = rf(ctx, rent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, rentId, rent
func (_m *RentRepository) Update(ctx context.Context, rentId string, rent *entity.Rent) error {
	ret := _m.Called(ctx, rentId, rent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *entity.Rent) error); ok {
		r0 = rf(ctx, rentId, rent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRentRepository creates a new instance of RentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RentRepository {
	mock := &RentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
