// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/arvinpaundra/ngekost-api/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// SessionRepository is an autogenerated mock type for the SessionRepository type
type SessionRepository struct {
	mock.Mock
}

// DeleteById provides a mock function with given fields: ctx, sessionId
func (_m *SessionRepository) DeleteById(ctx context.Context, sessionId string) error {
	ret := _m.Called(ctx, sessionId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, sessionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByUserId provides a mock function with given fields: ctx, userId
func (_m *SessionRepository) DeleteByUserId(ctx context.Context, userId string) error {
	ret := _m.Called(ctx, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByDeviceId provides a mock function with given fields: ctx, deviceId
func (_m *SessionRepository) FindByDeviceId(ctx context.Context, deviceId string) (*entity.Session, error) {
	ret := _m.Called(ctx, deviceId)

	var r0 *entity.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Session, error)); ok {
		return rf(ctx, deviceId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Session); ok {
		r0 = rf(ctx, deviceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, deviceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, sessionId
func (_m *SessionRepository) FindById(ctx context.Context, sessionId string) (*entity.Session, error) {
	ret := _m.Called(ctx, sessionId)

	var r0 *entity.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Session, error)); ok {
		return rf(ctx, sessionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Session); ok {
		r0 = rf(ctx, sessionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sessionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserId provides a mock function with given fields: ctx, userId
func (_m *SessionRepository) FindByUserId(ctx context.Context, userId string) ([]*entity.Session, error) {
	ret := _m.Called(ctx, userId)

	var r0 []*entity.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*entity.Session, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*entity.Session); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, session
func (_m *SessionRepository) Save(ctx context.Context, session *entity.Session) error {
	ret := _m.Called(ctx, session)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Session) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, session, sessionId
func (_m *SessionRepository) Update(ctx context.Context, session *entity.Session, sessionId string) error {
	ret := _m.Called(ctx, session, sessionId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Session, string) error); ok {
		r0 = rf(ctx, session, sessionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSessionRepository creates a new instance of SessionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionRepository {
	mock := &SessionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
