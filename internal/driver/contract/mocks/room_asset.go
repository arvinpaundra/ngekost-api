// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/arvinpaundra/ngekost-api/internal/entity"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// RoomAssetRepository is an autogenerated mock type for the RoomAssetRepository type
type RoomAssetRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, assetId
func (_m *RoomAssetRepository) Delete(ctx context.Context, assetId string) error {
	ret := _m.Called(ctx, assetId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, assetId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteWithTx provides a mock function with given fields: ctx, tx, assetId
func (_m *RoomAssetRepository) DeleteWithTx(ctx context.Context, tx *gorm.DB, assetId string) error {
	ret := _m.Called(ctx, tx, assetId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string) error); ok {
		r0 = rf(ctx, tx, assetId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: ctx, assetId
func (_m *RoomAssetRepository) FindById(ctx context.Context, assetId string) (*entity.RoomAsset, error) {
	ret := _m.Called(ctx, assetId)

	var r0 *entity.RoomAsset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.RoomAsset, error)); ok {
		return rf(ctx, assetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.RoomAsset); ok {
		r0 = rf(ctx, assetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RoomAsset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, assetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByRoomId provides a mock function with given fields: ctx, roomId
func (_m *RoomAssetRepository) FindByRoomId(ctx context.Context, roomId string) ([]*entity.RoomAsset, error) {
	ret := _m.Called(ctx, roomId)

	var r0 []*entity.RoomAsset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*entity.RoomAsset, error)); ok {
		return rf(ctx, roomId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*entity.RoomAsset); ok {
		r0 = rf(ctx, roomId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.RoomAsset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, roomId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, asset
func (_m *RoomAssetRepository) Save(ctx context.Context, asset *entity.RoomAsset) error {
	ret := _m.Called(ctx, asset)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.RoomAsset) error); ok {
		r0 = rf(ctx, asset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveWithTx provides a mock function with given fields: ctx, tx, asset
func (_m *RoomAssetRepository) SaveWithTx(ctx context.Context, tx *gorm.DB, asset *entity.RoomAsset) error {
	ret := _m.Called(ctx, tx, asset)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.RoomAsset) error); ok {
		r0 = rf(ctx, tx, asset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, asset, assetId
func (_m *RoomAssetRepository) Update(ctx context.Context, asset *entity.RoomAsset, assetId string) error {
	ret := _m.Called(ctx, asset, assetId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.RoomAsset, string) error); ok {
		r0 = rf(ctx, asset, assetId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWithTx provides a mock function with given fields: ctx, tx, asset, assetId
func (_m *RoomAssetRepository) UpdateWithTx(ctx context.Context, tx *gorm.DB, asset *entity.RoomAsset, assetId string) error {
	ret := _m.Called(ctx, tx, asset, assetId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.RoomAsset, string) error); ok {
		r0 = rf(ctx, tx, asset, assetId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRoomAssetRepository creates a new instance of RoomAssetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoomAssetRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoomAssetRepository {
	mock := &RoomAssetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
