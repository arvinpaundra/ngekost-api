// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/arvinpaundra/ngekost-api/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// LesseeRepository is an autogenerated mock type for the LesseeRepository type
type LesseeRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, keyword
func (_m *LesseeRepository) Count(ctx context.Context, keyword string) (int, error) {
	ret := _m.Called(ctx, keyword)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, keyword)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, keyword)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, keyword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, keyword
func (_m *LesseeRepository) Find(ctx context.Context, keyword string) ([]*entity.Lessee, error) {
	ret := _m.Called(ctx, keyword)

	var r0 []*entity.Lessee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*entity.Lessee, error)); ok {
		return rf(ctx, keyword)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*entity.Lessee); ok {
		r0 = rf(ctx, keyword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Lessee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, keyword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, id
func (_m *LesseeRepository) FindById(ctx context.Context, id string) (*entity.Lessee, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Lessee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Lessee, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Lessee); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Lessee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, lessee
func (_m *LesseeRepository) Save(ctx context.Context, lessee *entity.Lessee) error {
	ret := _m.Called(ctx, lessee)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Lessee) error); ok {
		r0 = rf(ctx, lessee)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, lessee, ownerId
func (_m *LesseeRepository) Update(ctx context.Context, lessee *entity.Lessee, ownerId string) error {
	ret := _m.Called(ctx, lessee, ownerId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Lessee, string) error); ok {
		r0 = rf(ctx, lessee, ownerId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLesseeRepository creates a new instance of LesseeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLesseeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LesseeRepository {
	mock := &LesseeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
